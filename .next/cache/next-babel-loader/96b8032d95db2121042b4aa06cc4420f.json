{"ast":null,"code":"var _jsxFileName = \"/Users/janioviniciusmiara/Desktop/EstudosReact/vnda_ecommerce/src/components/form/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useContext, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { FormContext, useForm } from '../../providers/formUser';\nimport { useUser } from '../../providers/users';\n\nconst Form = () => {\n  const {\n    0: {\n      user\n    }\n  } = useContext(FormContext);\n  const {\n    validateUser,\n    error\n  } = useUser();\n  const {\n    handleChange,\n    handleKeyDown,\n    handleChangeTags,\n    validateString,\n    validateTags,\n    validateInteger\n  } = useForm();\n  useEffect(() => {\n    validateUser();\n  }, [user]);\n  return __jsx(\"form\", {\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    onChange: e => handleChange(e.target),\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    name: \"name\",\n    label: \"nome\",\n    type: \"text\",\n    id: \"nome\",\n    value: user.name,\n    error: validateString(user.name),\n    helperText: validateString(user.name) && 'Nome não pode ser em branco.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    onChange: e => handleChange(e.target),\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    name: \"email\",\n    value: user.email,\n    autoComplete: \"email\",\n    error: validateString(user.email),\n    helperText: validateString(user.email) && 'Email não pode ser em branco.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    onChange: e => handleChange(e.target),\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"codigo\",\n    label: \"codigo externo\",\n    name: \"external_code\",\n    value: user.external_code,\n    error: validateString(user.external_code),\n    helperText: validateString(user.external_code) && 'Codigo não pode ser em branco.',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"standard-select-currency-native\",\n    select: true,\n    value: user.role,\n    label: \"Fun\\xE7\\xE3o\",\n    name: 'role',\n    type: \"number\",\n    onChange: e => handleChange(e.target),\n    error: validateInteger(user.role),\n    helperText: validateInteger(user.role) && 'Função não pode ser em branco.',\n    SelectProps: {\n      native: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: -1,\n    disabled: true,\n    selected: true,\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Selecionar\"), __jsx(\"option\", {\n    value: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"Gestor\"), __jsx(\"option\", {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Agente\"), __jsx(\"option\", {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Local\")), __jsx(Autocomplete, {\n    multiple: true,\n    freeSolo: true,\n    fullWidth: true,\n    id: \"tags-outlined\",\n    options: [],\n    value: user.tags,\n    onChange: (event, newValue) => handleChangeTags(newValue),\n    filterSelectedOptions: true,\n    renderInput: params => {\n      params.inputProps.onKeyDown = handleKeyDown;\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: \"Tgas\",\n        placeholder: \"Tgas\",\n        required: true,\n        margin: \"normal\",\n        fullWidth: true,\n        error: validateTags(user.tags),\n        helperText: validateTags(user.tags) && 'Tags não pode ser em branco.',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), error && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"codigo externo j\\xE1 est\\xE1 em uso ou email n\\xE3o \\xE9 v\\xE1lido \"));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/janioviniciusmiara/Desktop/EstudosReact/vnda_ecommerce/src/components/form/index.tsx"],"names":["React","useContext","useEffect","TextField","Autocomplete","FormContext","useForm","useUser","Form","user","validateUser","error","handleChange","handleKeyDown","handleChangeTags","validateString","validateTags","validateInteger","e","target","name","email","external_code","role","native","tags","event","newValue","params","inputProps","onKeyDown"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport { TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { FormContext, useForm } from '../../providers/formUser'\nimport { useUser } from '../../providers/users'\n\nconst Form: React.FC = () => {\n  const [{ user }] = useContext(FormContext)\n  const { validateUser, error } = useUser()\n  const {\n    handleChange,\n    handleKeyDown,\n    handleChangeTags,\n    validateString,\n    validateTags,\n    validateInteger\n  } = useForm()\n\n  useEffect(() => {\n    validateUser()\n  }, [user])\n\n  return (\n    <form noValidate>\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        name=\"name\"\n        label=\"nome\"\n        type=\"text\"\n        id=\"nome\"\n        value={user.name}\n        error={validateString(user.name)}\n        helperText={validateString(user.name) && 'Nome não pode ser em branco.'}\n      />\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"email\"\n        label=\"Email Address\"\n        name=\"email\"\n        value={user.email}\n        autoComplete=\"email\"\n        error={validateString(user.email)}\n        helperText={\n          validateString(user.email) && 'Email não pode ser em branco.'\n        }\n      />\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"codigo\"\n        label=\"codigo externo\"\n        name=\"external_code\"\n        value={user.external_code}\n        error={validateString(user.external_code)}\n        helperText={\n          validateString(user.external_code) && 'Codigo não pode ser em branco.'\n        }\n      />\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"standard-select-currency-native\"\n        select\n        value={user.role}\n        label=\"Função\"\n        name={'role'}\n        type=\"number\"\n        onChange={e => handleChange(e.target)}\n        error={validateInteger(user.role)}\n        helperText={\n          validateInteger(user.role) && 'Função não pode ser em branco.'\n        }\n        SelectProps={{ native: true }}\n      >\n        <option value={-1} disabled selected hidden>\n          Selecionar\n        </option>\n        <option value={0}>Gestor</option>\n        <option value={1}>Agente</option>\n        <option value={2}>Local</option>\n      </TextField>\n\n      <Autocomplete\n        multiple\n        freeSolo\n        fullWidth\n        id=\"tags-outlined\"\n        options={[]}\n        value={user.tags}\n        onChange={(event, newValue) => handleChangeTags(newValue)}\n        filterSelectedOptions\n        renderInput={(params: any) => {\n          params.inputProps.onKeyDown = handleKeyDown\n          return (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Tgas\"\n              placeholder=\"Tgas\"\n              required\n              margin=\"normal\"\n              fullWidth\n              error={validateTags(user.tags)}\n              helperText={\n                validateTags(user.tags) && 'Tags não pode ser em branco.'\n              }\n            />\n          )\n        }}\n      />\n      {error && <div>codigo externo já está em uso ou email não é válido </div>}\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}