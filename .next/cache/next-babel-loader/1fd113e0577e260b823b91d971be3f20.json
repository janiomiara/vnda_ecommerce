{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/janioviniciusmiara/Desktop/EstudosReact/vnda_ecommerce/src/components/form/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { FormContext, useForm } from '../../providers/formUser';\nimport { Alert } from '@material-ui/lab';\n\nvar Form = function Form() {\n  _s();\n\n  var _useContext = useContext(FormContext),\n      user = _useContext[0].user;\n\n  var _useForm = useForm(),\n      handleChange = _useForm.handleChange,\n      handleKeyDown = _useForm.handleKeyDown,\n      handleChangeTags = _useForm.handleChangeTags,\n      validateString = _useForm.validateString,\n      validateTags = _useForm.validateTags,\n      validateInteger = _useForm.validateInteger,\n      error = _useForm.error;\n\n  return __jsx(\"form\", {\n    noValidate: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(TextField, {\n    onChange: function onChange(e) {\n      return handleChange(e.target);\n    },\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    name: \"name\",\n    label: \"nome\",\n    type: \"text\",\n    id: \"nome\",\n    value: user.name,\n    error: validateString(user.name),\n    helperText: validateString(user.name) && 'Nome não pode ser em branco.',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    onChange: function onChange(e) {\n      return handleChange(e.target);\n    },\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    name: \"email\",\n    value: user.email,\n    autoComplete: \"email\",\n    error: validateString(user.email),\n    helperText: validateString(user.email) && 'Email não pode ser em branco.',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    onChange: function onChange(e) {\n      return handleChange(e.target);\n    },\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"codigo\",\n    label: \"codigo externo\",\n    name: \"external_code\",\n    value: user.external_code,\n    error: validateString(user.external_code),\n    helperText: validateString(user.external_code) && 'Codigo não pode ser em branco.',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"standard-select-currency-native\",\n    select: true,\n    value: user.role,\n    label: \"Fun\\xE7\\xE3o\",\n    name: 'role',\n    type: \"number\",\n    onChange: function onChange(e) {\n      return handleChange(e.target);\n    },\n    error: validateInteger(user.role),\n    helperText: validateInteger(user.role) && 'Função não pode ser em branco.',\n    SelectProps: {\n      \"native\": true\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(\"option\", {\n    value: -1,\n    disabled: true,\n    selected: true,\n    hidden: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Selecionar\"), __jsx(\"option\", {\n    value: 0,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"Gestor\"), __jsx(\"option\", {\n    value: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Agente\"), __jsx(\"option\", {\n    value: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Local\")), __jsx(Autocomplete, {\n    multiple: true,\n    freeSolo: true,\n    fullWidth: true,\n    id: \"tags-outlined\",\n    options: [],\n    value: user.tags,\n    onChange: function onChange(event, newValue) {\n      return handleChangeTags(newValue);\n    },\n    filterSelectedOptions: true,\n    renderInput: function renderInput(params) {\n      params.inputProps.onKeyDown = handleKeyDown;\n      return __jsx(TextField, _extends({}, params, {\n        variant: \"outlined\",\n        label: \"Tgas\",\n        placeholder: \"Tgas\",\n        required: true,\n        margin: \"normal\",\n        fullWidth: true,\n        error: validateTags(user.tags),\n        helperText: validateTags(user.tags) && 'Tags não pode ser em branco.',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), error && __jsx(Alert, {\n    severity: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Codigo externo j\\xE1 est\\xE1 em uso ou email n\\xE3o \\xE9 v\\xE1lido!\"));\n};\n\n_s(Form, \"9AroghWf6yuo3EAuvvtvpm93f14=\", false, function () {\n  return [useForm];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/janioviniciusmiara/Desktop/EstudosReact/vnda_ecommerce/src/components/form/index.tsx"],"names":["React","useContext","TextField","Autocomplete","FormContext","useForm","Alert","Form","user","handleChange","handleKeyDown","handleChangeTags","validateString","validateTags","validateInteger","error","e","target","name","email","external_code","role","tags","event","newValue","params","inputProps","onKeyDown"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport { TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { FormContext, useForm } from '../../providers/formUser'\nimport { Alert } from '@material-ui/lab'\n\nconst Form: React.FC = () => {\n  const [{ user }] = useContext(FormContext)\n  const {\n    handleChange,\n    handleKeyDown,\n    handleChangeTags,\n    validateString,\n    validateTags,\n    validateInteger,\n    error\n  } = useForm()\n\n  return (\n    <form noValidate>\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        name=\"name\"\n        label=\"nome\"\n        type=\"text\"\n        id=\"nome\"\n        value={user.name}\n        error={validateString(user.name)}\n        helperText={validateString(user.name) && 'Nome não pode ser em branco.'}\n      />\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"email\"\n        label=\"Email Address\"\n        name=\"email\"\n        value={user.email}\n        autoComplete=\"email\"\n        error={validateString(user.email)}\n        helperText={\n          validateString(user.email) && 'Email não pode ser em branco.'\n        }\n      />\n      <TextField\n        onChange={e => handleChange(e.target)}\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"codigo\"\n        label=\"codigo externo\"\n        name=\"external_code\"\n        value={user.external_code}\n        error={validateString(user.external_code)}\n        helperText={\n          validateString(user.external_code) && 'Codigo não pode ser em branco.'\n        }\n      />\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"standard-select-currency-native\"\n        select\n        value={user.role}\n        label=\"Função\"\n        name={'role'}\n        type=\"number\"\n        onChange={e => handleChange(e.target)}\n        error={validateInteger(user.role)}\n        helperText={\n          validateInteger(user.role) && 'Função não pode ser em branco.'\n        }\n        SelectProps={{ native: true }}\n      >\n        <option value={-1} disabled selected hidden>\n          Selecionar\n        </option>\n        <option value={0}>Gestor</option>\n        <option value={1}>Agente</option>\n        <option value={2}>Local</option>\n      </TextField>\n\n      <Autocomplete\n        multiple\n        freeSolo\n        fullWidth\n        id=\"tags-outlined\"\n        options={[]}\n        value={user.tags}\n        onChange={(event, newValue) => handleChangeTags(newValue)}\n        filterSelectedOptions\n        renderInput={(params: any) => {\n          params.inputProps.onKeyDown = handleKeyDown\n          return (\n            <TextField\n              {...params}\n              variant=\"outlined\"\n              label=\"Tgas\"\n              placeholder=\"Tgas\"\n              required\n              margin=\"normal\"\n              fullWidth\n              error={validateTags(user.tags)}\n              helperText={\n                validateTags(user.tags) && 'Tags não pode ser em branco.'\n              }\n            />\n          )\n        }}\n      />\n      {error && (\n        <Alert severity=\"error\">\n          Codigo externo já está em uso ou email não é válido!\n        </Alert>\n      )}\n    </form>\n  )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}